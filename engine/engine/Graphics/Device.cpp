#include "engine/pch.h"
#include "Device.hpp"

////////////////////////////////////////////////////////////////
//////////////////////////// Define ////////////////////////////
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
//////////////////////////// Static ////////////////////////////
////////////////////////////////////////////////////////////////
S<Device> gDevice = nullptr;

////////////////////////////////////////////////////////////////
/////////////////////// Standalone Function /////////////////////
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
///////////////////////// Member Function //////////////////////
////////////////////////////////////////////////////////////////
Device::~Device()
{
}

CommandBuffer& Device::GetThreadCommandBuffer()
{
   auto kv = mCommandAllocators.find( std::this_thread::get_id() );
   ASSERT_DIE( kv != mCommandAllocators.end() );
   return kv->second.GetUsableCommandBuffer();
}

Device& Device::Get()
{
   return *gDevice;
}

Device& Device::Init(Window& window)
{
   if(nullptr == gDevice) {
      gDevice = S<Device>(new Device());
      ASSERT_DIE(gDevice->RhiInit(window));
   }

   return *gDevice;
}

