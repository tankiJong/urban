#include "engine/pch.h"
#include "StructuredBuffer.hpp"
#include "CommandList.hpp"

////////////////////////////////////////////////////////////////
//////////////////////////// Define ////////////////////////////
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
//////////////////////////// Static ////////////////////////////
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
/////////////////////// Standalone Function /////////////////////
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
///////////////////////// Member Function //////////////////////
////////////////////////////////////////////////////////////////

void StructuredBuffer::UploadGpu( CommandList& list )
{
   if(!mIsDirty) return;

   list.CopyBufferRegion( *mUploadBuffer, 0, *this, 0, mStride * mCount );
   mIsDirty = false;
}

void StructuredBuffer::SetVariable( size_t index, const void* data, size_t byteSize )
{
   ASSERT_DIE( index * mStride + byteSize <= mCpuCache.size() );
   uint8_t* start = mCpuCache.data() + index * mStride;
   memcpy( start, data, byteSize );

   mUploadBuffer->UploadData( data, byteSize, index * mStride );

   mIsDirty = true;
}
