#include "engine/pch.h"
#include "engine/graphics/Device.hpp"
#include "engine/graphics/CommandBuffer.hpp"
#include "engine/graphics/CommandList.hpp"
#include "engine/platform/win.hpp"

////////////////////////////////////////////////////////////////
//////////////////////////// Define ////////////////////////////
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
//////////////////////////// Static ////////////////////////////
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
/////////////////////// Standalone Function /////////////////////
////////////////////////////////////////////////////////////////

// defined in `D3d12CommandList.cpp`
D3D12_COMMAND_LIST_TYPE ToD3d12CommandListType(eQueueType queueType);

////////////////////////////////////////////////////////////////
///////////////////////// Member Function //////////////////////
////////////////////////////////////////////////////////////////

void CommandBuffer::Init( Device& device, eQueueType type )
{
   mQueueType = type;
   assert_win( device.NativeDevice()->CreateCommandAllocator( ToD3d12CommandListType(type), IID_PPV_ARGS( &mHandle) ) );
   mLastUpdateFrame = 0;
}

void CommandBuffer::Reset()
{
   mHandle->Reset();
}

void CommandBuffer::Bind( CommandList& commandList )
{
   assert_win( commandList.Handle()->Reset( mHandle.Get(), nullptr ) );
}
